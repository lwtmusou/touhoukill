name: CMake

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build-ubuntu:
    # This matrix uses prebuilt Qt from Ubuntu package repository
    # Qt 6 is available since this version. Ubuntu-latest still use focal (20.04) as of 2022/10/4
    # jammy (22.04) also features Qt 5.15 while focal (20.04) still features 5.12, bionic (18.04) features 5.9
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        dependency:
          - dep:
            optionalDependency:
          - dep: -Lua
            optionalDependency: liblua5.4-dev
          - dep: -vorbis
            optionalDependency: libvorbis-dev
          - dep: -Lua-vorbis
            optionalDependency: liblua5.4-dev libvorbis-dev

    name: build-ubuntu2204${{ matrix.dependency.dep }}
    steps:
      - uses: actions/checkout@v2
        with:
          path: touhoukill-refactor

      - name: install softwares from repository
        run: |
          sudo apt-get update
          sudo apt-get dist-upgrade
          sudo apt-get install qtbase5-dev qtmultimedia5-dev qttools5-dev qt6-base-dev qt6-multimedia-dev qt6-tools-dev qt6-l10n-tools qt6-tools-dev-tools build-essential cmake git swig ninja-build ${{matrix.dependency.optionalDependency }}

      - name: run cmake+ninja
        run : |
          mkdir -p "build"
          cd "build"
          rm -rf *
          cmake -GNinja -DCMAKE_BUILD_TYPE=Release "${{ github.workspace }}/touhoukill-refactor"
          ninja -k0

  # GitHub actions don't provide a macOS on ARM runner. We can only use macOS on Intel
  build-macos-selfBuiltQt:
    # This matrix uses self-built Qt (by Fsu0413)
    strategy:
      matrix:
        macOS:
          - qt5url: https://sourceforge.net/projects/fsu0413-qtbuilds/files/Qt5.15/macOS-x86_64/Qt5.15.6-macOS-x86_64-AppleClang12.0.5-20220915.tar.xz
            qt5name: Qt5.15.6-macOS-x86_64-AppleClang12.0.5
            qt6url: https://sourceforge.net/projects/fsu0413-qtbuilds/files/Qt6.4/macOS-x86_64/Qt6.4.0-macOS-x86_64-AppleClang14.0.0-20221003.tar.xz
            qt6name: Qt6.4.0-macOS-x86_64-AppleClang14.0.0
        runner: [ "11", "12" ]

    name: build-macOS${{ matrix.runner }}-selfBuilt
    runs-on: macos-${{ matrix.runner }}
    steps:
      - uses: actions/checkout@v2
        with:
          path: touhoukill-refactor
      
      - name: install softwares from repository
        run: |
          brew install swig cmake ninja
      
      - name: install Qt5
        run: |
          mkdir Qt5
          curl -L -o Qt5/Qt5.tar.xz ${{ matrix.macOS.qt5url }}
          (cd Qt5 && tar -xf Qt5.tar.xz)
          ./Qt5/${{ matrix.macOS.qt5name }}/bin/qmake -query
      
      - name: install Qt6
        run: |
          mkdir Qt6
          curl -L -o Qt6/Qt6.tar.xz ${{ matrix.macOS.qt6url }}
          (cd Qt6 && tar -xf Qt6.tar.xz)
          ./Qt6/${{ matrix.macOS.qt6name }}/bin/qmake -query
      
      - name: run cmake+ninja
        run : |
          mkdir -p "build"
          cd "build"
          rm -rf *
          cmake -GNinja -DCMAKE_BUILD_TYPE=Release "-DCMAKE_PREFIX_PATH=${{ github.workspace }}/Qt5/${{ matrix.macOS.qt5name }};${{ github.workspace }}/Qt6/${{ matrix.macOS.qt6name }}" "${{ github.workspace }}/touhoukill-refactor"
          ninja -k0

  build-macOS-homebrewQt:
    # This matrix uses prebuilt Qt from Homebrew
    # macOS runners have vorbis preinstalled by Homebrew, so we uninstall it before running our workflow
    strategy:
      matrix:
        dependency:
          - dep:
            optionalDependency:
          - dep: -Lua
            optionalDependency: lua@5.4
          - dep: -vorbis
            optionalDependency: libvorbis
          - dep: -Lua-vorbis
            optionalDependency: lua@5.4 libvorbis
        runner: [ "11", "12" ]

    name: build-macOS${{ matrix.runner }}-Homebrew${{ matrix.dependency.dep }}
    runs-on: macos-${{ matrix.runner }}
    steps:
      - uses: actions/checkout@v2
        with:
          path: touhoukill-refactor
      
      - name: install softwares from repository
        run: |
          brew update
          brew upgrade
          brew uninstall --ignore-dependencies -f "lua@5.4" libvorbis || true
          brew install 'qt@5' 'qt@6' swig cmake ninja ${{ matrix.dependency.optionalDependency }}
      
      - name: run cmake+ninja
        run : |
          mkdir -p "build"
          cd "build"
          rm -rf *
          cmake -GNinja -DCMAKE_BUILD_TYPE=Release "-DCMAKE_PREFIX_PATH=/usr/local/opt/qt@5/;/usr/local/opt/qt@6/" "${{ github.workspace }}/touhoukill-refactor"
          ninja -k0
          
  build-msvc:
    # This matrix uses self-built Qt (by Fsu0413)
    strategy:
      matrix:
        VC:
          - ver: 2019
            runson: windows-2019
            call: C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat
            qt5url: https://sourceforge.net/projects/fsu0413-qtbuilds/files/Qt5.15/Windows-x86_64/Qt5.15.6-Windows-x86_64-VS2019-16.11.18-20220914.7z
            qt5name: Qt5.15.6-Windows-x86_64-VS2019-16.11.18
            qt6url: https://sourceforge.net/projects/fsu0413-qtbuilds/files/Qt6.4/Windows-x86_64/Qt6.4.0-Windows-x86_64-VS2019-16.11.19-20221003.7z
            qt6name: Qt6.4.0-Windows-x86_64-VS2019-16.11.19
          - ver: 2022
            runson: windows-2022
            call: C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat
            qt5url: https://sourceforge.net/projects/fsu0413-qtbuilds/files/Qt5.15/Windows-x86_64/Qt5.15.6-Windows-x86_64-VS2022-17.3.3-20220915.7z
            qt5name: Qt5.15.6-Windows-x86_64-VS2022-17.3.3
            qt6url: https://sourceforge.net/projects/fsu0413-qtbuilds/files/Qt6.4/Windows-x86_64/Qt6.4.0-Windows-x86_64-VS2022-17.3.5-20221003.7z
            qt6name: Qt6.4.0-Windows-x86_64-VS2022-17.3.5

    name: build-MSVC-${{ matrix.VC.ver }}
    runs-on: ${{ matrix.VC.runson }}
    steps:
      - uses: actions/checkout@v2
        with:
          path: touhoukill-refactor

      - name: install softwares from repository
        run: |
          choco install swig
          choco install cmake
          choco install ninja

      - name: install Qt5
        run : |
          New-Item -Path "." -Name "Qt5" -ItemType "directory";
          (New-Object System.Net.WebClient).DownloadFile("${{ matrix.VC.qt5url }}","Qt5/Qt5.7z");
          cmd /c cd Qt5 "&&" 7z x Qt5.7z
          .\Qt5\${{ matrix.VC.qt5name }}\bin\qmake -query

      - name: install Qt6
        run : |
          New-Item -Path "." -Name "Qt6" -ItemType "directory";
          (New-Object System.Net.WebClient).DownloadFile("${{ matrix.VC.qt6url }}","Qt6/Qt6.7z");
          cmd /c cd Qt6 "&&" 7z x Qt6.7z
          .\Qt6\${{ matrix.VC.qt6name }}\bin\qmake -query

      - name: run cmake+ninja
        shell: cmd
        run : |
          del /s /q C:\Strawberry\perl\bin\pkg-config.bat
          call "${{ matrix.VC.call }}"
          mkdir "build"
          cd "build"
          rmdir /s /q *
          cmd /c cmake -GNinja -DCMAKE_BUILD_TYPE=Release "-DCMAKE_PREFIX_PATH=${{ github.workspace }}\Qt5\${{ matrix.VC.qt5name }};${{ github.workspace }}\Qt6\${{ matrix.VC.qt6name }}" "${{ github.workspace }}/touhoukill-refactor"
          ninja -k0

  build-mingw:
    # This matrix uses self-built Qt (by Fsu0413)
    strategy:
      matrix:
        mingw:
          - qtver: 5
            qturl: https://sourceforge.net/projects/fsu0413-qtbuilds/files/Qt5.15/Windows-x86_64/Qt5.15.6-Windows-x86_64-MinGW8.1.0-20220915.7z
            qtname: Qt5.15.6-Windows-x86_64-MinGW8.1.0
            mingwurl: https://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win64/Personal%20Builds/mingw-builds/8.1.0/threads-posix/seh/x86_64-8.1.0-release-posix-seh-rt_v6-rev0.7z
            mingwname: mingw64
          - qtver: 6
            qturl: https://sourceforge.net/projects/fsu0413-qtbuilds/files/Qt6.4/Windows-x86_64/Qt6.4.0-Windows-x86_64-MinGW12.1.0-20221003.7z
            qtname: Qt6.4.0-Windows-x86_64-MinGW12.1.0
            mingwurl: https://github.com/cristianadam/mingw-builds/releases/download/v12.1.0-rev0/x86_64-12.1.0-release-posix-seh-rt_v10-rev0.7z
            mingwname: mingw64

    name: build-mingw-qt${{ matrix.mingw.qtver }}
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
        with:
          path: touhoukill-refactor

      - name: install softwares from repository
        run: |
          choco install swig
          choco install cmake
          choco install ninja

      - name: install mingw toolchain
        run: |
          New-Item -Path "." -Name "mingw" -ItemType "directory";
          (New-Object System.Net.WebClient).DownloadFile("${{ matrix.mingw.mingwurl }}","mingw/mingw.7z");
          cmd /c cd mingw "&&" 7z x mingw.7z

      - name: install Qt${{ matrix.mingw.qtver }}
        run : |
          New-Item -Path "." -Name "Qt${{ matrix.mingw.qtver }}" -ItemType "directory";
          (New-Object System.Net.WebClient).DownloadFile("${{ matrix.mingw.qturl }}","Qt${{ matrix.mingw.qtver }}/Qt${{ matrix.mingw.qtver }}.7z");
          cmd /c cd Qt${{ matrix.mingw.qtver }} "&&" 7z x Qt${{ matrix.mingw.qtver }}.7z

      - name: run cmake+ninja
        shell: cmd
        run : |
          del /s /q C:\Strawberry\perl\bin\pkg-config.bat
          set path=${{ github.workspace }}\mingw\${{ matrix.mingw.mingwname }}\\bin;%path%
          mkdir "build"
          cd "build"
          rmdir /s /q *
          cmd /c cmake -GNinja -DCMAKE_BUILD_TYPE=Release "-DCMAKE_PREFIX_PATH=${{ github.workspace }}\Qt${{ matrix.mingw.qtver }}\${{ matrix.mingw.qtname }}" "${{ github.workspace }}/touhoukill-refactor"
          ninja -k0

  build-mingwclang:
    # This matrix uses self-built Qt (by Fsu0413)
    runs-on: windows-latest
    strategy:
      matrix:
        clang:
          - ver: msvcrt
            toolchainurl: https://github.com/mstorsjo/llvm-mingw/releases/download/20220906/llvm-mingw-20220906-msvcrt-x86_64.zip
            toolchainname: llvm-mingw-20220906-msvcrt-x86_64
            qt6url: https://sourceforge.net/projects/fsu0413-qtbuilds/files/Qt6.4/Windows-x86_64/Qt6.4.0-Windows-x86_64-llvm-mingw-15.0.0-msvcrt-20221003.7z
            qt6name: Qt6.4.0-Windows-x86_64-llvm-mingw-15.0.0-msvcrt
          - ver: ucrt
            toolchainurl: https://github.com/mstorsjo/llvm-mingw/releases/download/20220906/llvm-mingw-20220906-ucrt-x86_64.zip
            toolchainname: llvm-mingw-20220906-ucrt-x86_64
            qt6url: https://sourceforge.net/projects/fsu0413-qtbuilds/files/Qt6.4/Windows-x86_64/Qt6.4.0-Windows-x86_64-llvm-mingw-15.0.0-ucrt-20221003.7z
            qt6name: Qt6.4.0-Windows-x86_64-llvm-mingw-15.0.0-ucrt

    name: build-mingwclang-${{ matrix.clang.ver }}
    steps:
      - uses: actions/checkout@v2
        with:
          path: touhoukill-refactor

      - name: install softwares from repository
        run: |
          choco install swig
          choco install cmake
          choco install ninja

      - name: install llvm mingw toolchain
        run: |
          New-Item -Path "." -Name "llvm-mingw" -ItemType "directory";
          (New-Object System.Net.WebClient).DownloadFile("${{ matrix.clang.toolchainurl }}","llvm-mingw/llvm-mingw.zip");
          cmd /c cd llvm-mingw "&&" 7z x llvm-mingw.zip

      - name: install Qt6
        run : |
          New-Item -Path "." -Name "Qt6" -ItemType "directory";
          (New-Object System.Net.WebClient).DownloadFile("${{ matrix.clang.qt6url }}","Qt6/Qt6.7z");
          cmd /c cd Qt6 "&&" 7z x Qt6.7z

          # This doesn't work!
          # set path=${{ github.workspace }}\llvm-mingw\llvm-mingw-20211002-${{ matrix.clang.sys }}-x86_64\x86_64-w64-mingw32\bin;${{ github.workspace }}\llvm-mingw\llvm-mingw-20211002-${{ matrix.clang.sys }}-x86_64\bin;%path%
          # .\Qt6\${{ matrix.clang.qt6name }}\bin\qmake -query

      - name: run cmake+ninja
        shell: cmd
        run : |
          del /s /q C:\Strawberry\perl\bin\pkg-config.bat
          set path=${{ github.workspace }}\llvm-mingw\${{ matrix.clang.toolchainname }}\x86_64-w64-mingw32\bin;${{ github.workspace }}\llvm-mingw\${{ matrix.clang.toolchainname }}\bin;%path%
          mkdir "build"
          cd "build"
          rmdir /s /q *
          cmd /c cmake -GNinja -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER="x86_64-w64-mingw32-clang++" -DCMAKE_C_COMPILER="x86_64-w64-mingw32-clang" -DCMAKE_ASM_COMPILER="x86_64-w64-mingw32-clang" "-DCMAKE_PREFIX_PATH=${{ github.workspace }}\Qt6\${{ matrix.clang.qt6name }}" "${{ github.workspace }}/touhoukill-refactor"
          ninja -k0

  build-mingwmsys:
    # This matrix uses prebuilt Qt from MSYS2
    runs-on: windows-latest
    strategy:
      matrix:
        msys: [
          { sys: mingw64, env: x86_64 },
          { sys: ucrt64,  env: ucrt-x86_64 },
          { sys: clang64, env: clang-x86_64 },
        ]
        dependency:
          - dep:
            optionalDependency:
          - dep: -Lua
            optionalDependency: lua
          - dep: -vorbis
            optionalDependency: libvorbis
          - dep: -Lua-vorbis
            optionalDependency: lua libvorbis
    name: build-msys-${{ matrix.msys.sys }}${{ matrix.dependency.dep }}
    steps:
      - uses: actions/checkout@v2
        with:
          path: touhoukill-refactor

      - uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.msys.sys }}
          install: mingw-w64-${{ matrix.msys.env }}-cmake mingw-w64-${{ matrix.msys.env }}-qt5 mingw-w64-${{ matrix.msys.env }}-qt6 mingw-w64-${{ matrix.msys.env }}-swig mingw-w64-${{ matrix.msys.env }}-toolchain mingw-w64-${{ matrix.msys.env }}-ninja
          update: true

      - name: install optional dependencies and update
        shell: msys2 {0}
        run : |
          prependPrefix() { while read; do for i in ${REPLY}; do echo "mingw-w64-${{ matrix.msys.env }}-${i}" ; done; done }
          pacman -Rc --noconfirm `echo "lua" | prependPrefix` || :
          pacman -Rc --noconfirm `echo "libvorbis" | prependPrefix` || :
          pacman -Syu --noconfirm `echo "${{ matrix.dependency.optionalDependency }}" | prependPrefix`

      - name: run cmake+ninja
        shell: msys2 {0}
        run : |
          mkdir -p "${{ github.workspace }}/build"
          cd "${{ github.workspace }}/build"
          rm -rf `ls -A`
          cmake -GNinja "${{ github.workspace }}/touhoukill-refactor"
          ninja -k0
